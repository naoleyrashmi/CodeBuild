def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    to_emails = "${env.DEFAULT_RECIPIENT}" == "null" ? '' : "${env.DEFAULT_RECIPIENT}"
    def subject = "${buildStatus}: Job '${env.JOB_NAME} :${env.BUILD_NUMBER}'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = """
        <p>${buildStatus}: Job '${env.JOB_NAME} ${env.BUILD_NUMBER}':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}:${env.BUILD_NUMBER}</a>"</p>
    """

    emailext (
        subject: subject,
        body: details,
        attachLog: true,
        to: to_emails,
        recipientProviders: [
            [$class: 'RequesterRecipientProvider']
        ]
    )
}

node {
    def whImage
    try{
        stage ("Get Parameters"){
            checkout scm
            List props = []
            List params = [
                string(name: 'ACCOUNT_NAME', description: 'Please Enter the name of the customer to be on boarded.'),
                choice(name: 'REGION', description: 'Please select the AWS Region', choices: 'eu-west-1\neu-west-2\neu-west-3\neu-central-1\nus-west-1\nus-west-2\nus-east-2\nus-east-1\nap-northeast-1\nap-northeast-2\nap-northeast-3\nap-south-1\nap-southeast-1\nap-southeast-2\nca-central-1\ncn-north-1\ncn-northwest-1\nsa-east-1'),
                credentials(name: 'CREDENTIALS', description: 'AWS Credentials', credentialType: "Username with password"),
                booleanParam(name: 'APPLY_CHANGES', defaultValue: false, description: 'If not opted, it will be dry run')
            ]
            props << parameters(params)
            properties(props)
            whImage = docker.build("whcontainer:latest")
        }
        
        wrap([$class: 'BuildUser']) {
            withCredentials([
                [$class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: CREDENTIALS,
                roleSessionName: BUILD_USER_EMAIL]]){

                    whImage.inside('-u 0:0') {
                        stage ('Setup Env') {
                            script {
                                currentBuild.displayName = "#${env.BUILD_NUMBER}-${params.ACCOUNT_NAME}-${params.APPLY_CHANGES ? 'Apply (Remove Resources)' : 'Plan (Dry Run)' }"
                                currentBuild.description = "${env.BUILD_NUMBER}-${params.ACCOUNT_NAME}-${params.APPLY_CHANGES ? 'Apply (Remove Resources)' : 'Plan (Dry run)' }"
                            }
                            sh (script: '''
                                #!/bin/bash
                                chmod 755 -R terraform
                            ''')
                        }

                        stage ('Validate Params') {
                            sh (script: '''
                                #!/bin/bash
                                JENKINS_WS=`pwd`
                                cd ./terraform/utility
                                chmod 755 paramsValidator.sh
                                # Commented below line as we have not created IAM in this pipeline
                                #./paramsValidator.sh "ACCOUNT_NAME, REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN, IAM_DATA_FILE_NAME"
                                ./paramsValidator.sh "ACCOUNT_NAME, REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN"
                                ADDITIONAL_CONFIG_BUCKET_NAME="tieto-${ACCOUNT_NAME}-tfstate"
                                ADDITIONAL_CONFIG_BUCKET_FOLDER="data/"
                                SECURITY_GROUP_DATA_FILE_NAME="sg_s3_reference.yml"
                                IAM_DATA_FILE_NAME="iam-s3-reference.yml"
                                cd ../00-Infra-Layout/05-security-groups
                                python ${JENKINS_WS}/terraform/utility/helper.py download_file_from_s3 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} ${AWS_SESSION_TOKEN} ${REGION} ${ADDITIONAL_CONFIG_BUCKET_NAME} ${ADDITIONAL_CONFIG_BUCKET_FOLDER} ${SECURITY_GROUP_DATA_FILE_NAME}
                                python security_groups_builder.py "${SECURITY_GROUP_DATA_FILE_NAME}"
                                cd ../06-iam
                                # Commented below lines as we have not created IAM in this pipeline
                                #python ${JENKINS_WS}/terraform/utility/helper.py download_file_from_s3 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} ${AWS_SESSION_TOKEN} ${REGION} ${ADDITIONAL_CONFIG_BUCKET_NAME} ${ADDITIONAL_CONFIG_BUCKET_FOLDER} ${IAM_DATA_FILE_NAME}
                                #python iam_terraform_code_generator.py "${IAM_DATA_FILE_NAME}"
                            ''')
                        }

                        stage ('Destroy-Resources-In-Parallel') {
                            parallel '03-s3': {
                                    sh (script: '''
                                        #!/bin/bash
                                        export MODULE=00-Infra-Layout/03-s3
                                        cd ./terraform/${MODULE}/ci
                                        ./destroy.sh
                                    ''')
                                },
                                '04-hosted-zone': {
                                    sh (script: '''
                                        #!/bin/bash
                                        export MODULE=00-Infra-Layout/04-hosted-zone
                                        cd ./terraform/${MODULE}/ci
                                        ./destroy.sh
                                    ''')
                                },
                                '05-security-groups': {
                                    sh (script: '''
                                        #!/bin/bash
                                        export MODULE=00-Infra-Layout/05-security-groups
                                        cd ./terraform/${MODULE}/ci
                                        ./destroy.sh
                                    ''')
                                },
                                '06-iam': {
                                    sh (script: '''
                                        #!/bin/bash
                                        # Commented below lines as we have not created IAM in this pipeline
                                        #export MODULE=00-Infra-Layout/06-iam
                                        #cd ./terraform/${MODULE}/ci
                                        #./destroy.sh
                                        echo "No IAM roles deleted. Just keeping it as placeholder if required in future"
                                    ''')
                                },

                                '07-sns': {
                                    withAWS(region: REGION) {
                                        if (env.APPLY_CHANGES == "true") {
                                            echo "Applying CloudFormation Template to delete the stack"
                                            def outputs = cfnDelete(stack:"${ACCOUNT_NAME}-sns",
                                            pollInterval:100000)
                                        } else {
                                            echo "This is Dry Run. CFn Stack deleted will be ${ACCOUNT_NAME}-sns"
                                        }
                                    }
                                }
                        }

                        stage ('01-keygen') {
                            sh (script: '''
                                #!/bin/bash
                                # eval $(env | awk -F= '{ print "export " $1 }')
                                export MODULE=00-Infra-Layout/01-keygen
                                ls -lart ./terraform/00-Infra-Layout/
                                # cd ./terraform/${MODULE}/ci
                                # ./destroy.sh
                            ''')
                        }

                        stage ('02-vpc') {
                            sh (script: '''
                                #!/bin/bash
                                export MODULE=00-Infra-Layout/02-vpc
                                cd ./terraform/${MODULE}/ci
                                ./destroy.sh
                            ''')
                        }
                    }
                }
        }
    }catch (e) {
        currentBuild.result = "FAILED"
        throw e
    }
    finally {
        stage("Send Notifications"){
            notifyBuild(currentBuild.result)
        }
    }
}
