def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    to_emails = "${env.DEFAULT_RECIPIENT}" == "null" ? '' : "${env.DEFAULT_RECIPIENT}"
    def subject = "${buildStatus}: Job '${env.JOB_NAME} :${env.BUILD_NUMBER}'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = """
        <p>${buildStatus}: Job '${env.JOB_NAME} ${env.BUILD_NUMBER}':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}:${env.BUILD_NUMBER}</a>"</p>
    """

    emailext (
        subject: subject,
        body: details,
        attachLog: true,
        to: to_emails,
        recipientProviders: [
            [$class: 'RequesterRecipientProvider']
        ]
    )
}

node {
    def whImage
    try{
        stage ("Get Parameters"){
            checkout scm
            List props = []
            List params = [
                string(name: 'ACCOUNT_NAME', description: 'Please Enter the name of the customer to be on boarded. (CustomerName-AssetName)'),
                choice(name: 'REGION', description: 'Please select the AWS Region', choices: 'eu-west-1\neu-west-2\neu-west-3\neu-central-1\nus-west-1\nus-west-2\nus-east-2\nus-east-1\nap-northeast-1\nap-northeast-2\nap-northeast-3\nap-south-1\nap-southeast-1\nap-southeast-2\nca-central-1\ncn-north-1\ncn-northwest-1\nsa-east-1'),
                credentials(name: 'CREDENTIALS', description: 'AWS Credentials', credentialType: "Username with password"),
                //password(name: 'ACCESS_KEY', description: 'Please enter the AWS Access key'),
                //password(name: 'SECRET_KEY', description: 'Please enter the AWS Secret key'),
                string(name: 'VPC_CIDR', description: 'Please Enter the vpc cidr', defaultValue: '172.64.248.0/21'),
                string(name: 'PRIVATE_SUBNET_CIDR_AZ_A', description: 'Please Enter the private subnet cidr for availability zone a', defaultValue: '172.64.250.0/23'),
                string(name: 'PRIVATE_SUBNET_CIDR_AZ_B', description: 'Please Enter the private subnet cidr for availability zone b', defaultValue: '172.64.252.0/23'),
                string(name: 'PUBLIC_SUBNET_CIDR_AZ_A',  description: 'Please Enter the public subnet cidr for availability zone a',  defaultValue: '172.64.248.0/24'),
                string(name: 'PUBLIC_SUBNET_CIDR_AZ_B',  description: 'Please Enter the public subnet cidr for availability zone b',  defaultValue: '172.64.249.0/24'),
                string(name: 'ASSETS_EXPIRY_DATE', description: 'Date format is DD-MM-YYYY. Please note assets will not removed automatically on this date. It just adds a tag to resources'),
                booleanParam(name: 'APPLY_CHANGES', defaultValue: false, description: 'If not opted, it will be dry run')
            ]
            props << parameters(params)
            properties(props)
            whImage = docker.build("whcontainer:latest")
        }

        /* options ([
            buildDiscarder( logRotator(numToKeepStr: '30'))
            //timeout( time: 1, unit: 'HOURS'),
            //disableConcurrentBuilds()
        ]) */

        wrap([$class: 'BuildUser']) {
            withCredentials([
                [$class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: CREDENTIALS,
                roleSessionName: BUILD_USER_EMAIL]]){

                whImage.inside('-u 0:0') {
                    stage ('Setup Env') {
                        script {
                            currentBuild.displayName = "#${env.BUILD_NUMBER}-${params.ACCOUNT_NAME}-${params.APPLY_CHANGES ? 'Apply (Create Resources)' : 'Plan (Dry Run)' }"
                            currentBuild.description = "${env.BUILD_NUMBER}-${params.ACCOUNT_NAME}-${params.APPLY_CHANGES ? 'Apply (Create Resources)' : 'Plan (Dry run)' }"
                        }
                        sh (script: '''
                            #!/bin/bash
                            chmod 755 -R terraform
                            env
                        ''')
                    }

                    stage ('Validate Params') {
                        sh (script: '''
                            #!/bin/bash
                            env
                            JENKINS_WS=`pwd`
                            cd ./terraform/utility
                            chmod 755 paramsValidator.sh
                            ./paramsValidator.sh "ACCOUNT_NAME, REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN, VPC_CIDR, PRIVATE_SUBNET_CIDR_AZ_A, PRIVATE_SUBNET_CIDR_AZ_B, PUBLIC_SUBNET_CIDR_AZ_A, PUBLIC_SUBNET_CIDR_AZ_B, HOSTED_ZONE, SNS_INFRASTRUCTURE_ADMIN_ENDPOINT, SNS_INFRASTRUCTURE_OPS_ENDPOINT, SNS_DBA_ENDPOINT, PROJECT_ID, ASSETS_EXPIRY_DATE, APPLY_CHANGES"
                        ''')
                    }
                    stage ('02-vpc') {
                        sh (script: '''
                            #!/bin/bash
                            export MODULE=00-Infra-Layout/02-vpc
                            cd ./terraform/${MODULE}/ci
                            ./run.sh
                        ''')
                    }
                }
            }
        }
    }catch (e) {
        currentBuild.result = "FAILED"
        throw e
    }
    finally {
        stage("Send Notifications"){
            notifyBuild(currentBuild.result)
        }
    }
}
