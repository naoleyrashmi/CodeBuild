pipeline {
    agent any
    parameters {
        string(name: 'Account_Name', description: 'Please Enter the name of the customer.')
        choice(name: 'Region', description: 'Please select the AWS Region', choices: 'eu-west-1\neu-west-2\neu-west-3\neu-central-1\nus-west-1\nus-west-2\nus-east-2\nus-east-1\nap-northeast-1\nap-northeast-2\nap-northeast-3\nap-south-1\nap-southeast-1\nap-southeast-2\nca-central-1\ncn-north-1\ncn-northwest-1\nsa-east-1')
        credentials(name: 'CREDENTIALS', description: 'AWS Credentials', credentialType: 'Username with password')       
        string(name: 'PrimePartitionKey', defaultValue: 'DataFlowId' , description: 'HashType PrimaryKey Name')
        string(name: 'PrimePartitionKey1', defaultValue: 'DataFlowId' , description: 'HashType PrimaryKey1 Name')
        string(name: 'PrimePartitionKey2', defaultValue: 'DataFlowId' , description: 'HashType PrimaryKey Name')
        string(name: 'PrimePartitionKey3', defaultValue: 'ConnectionId' , description: 'HashType PrimaryKey Name')
		string(name: 'Pipeline_Name', defaultValue: 'Test' , description: 'Input name of Pipeline Job which you are trigerring')
        string(name: 'Environment_Name', defaultValue: 'dev' , description: 'Input name of environment for deployment')


		
    }
	stages {
        stage ('Setup Env') {
                    steps{
                        script {
                            currentBuild.displayName = "#${env.BUILD_NUMBER}-${env.Account_Name}-deployApp"
                            currentBuild.description = "${env.BUILD_NUMBER}-${env.Account_Name}-deployApp"
                        }
                    }
                } 
		stage ('Validate Params for App Deploy') {
				steps{
                      sh (script: '''
                          #!/bin/bash
                            cd ./App/utility
                            chmod 755 paramsValidator.sh
                            ./paramsValidator.sh "Account_Name, Region, CREDENTIALS, PrimePartitionKey, PrimePartitionKey1, PrimePartitionKey2, PrimePartitionKey3"
                        ''')
					}
				}
        stage('Build App') {
            steps {
		withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: CREDENTIALS, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
        {
				// some block
	           sh (script: '''
                    #!bin/bash
                    cd ./App/NestedScripts
		            rm -rf template-*.yaml
                    aws cloudformation package --template-file parentstack.yaml --s3-bucket rashmi-ohio-sam-demo --output-template-file packaged.yaml
                    aws s3api put-object-tagging  --bucket rashmi-ohio-sam-demo  --key packaged.yaml --tagging 'TagSet=[{Key=Environment,Value=blue}]' 
        
                    ls -lrt
                ''')
                }    
            }
        }

         stage('Deploy App') {
            steps {
		withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: CREDENTIALS, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
        {
				// some block
	           sh (script: '''
                    #!bin/bash
                    aws cloudformation deploy --template-file /var/lib/jenkins/workspace/${Pipeline_Name}/App/NestedScripts/packaged.yaml --region ${Region} --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --stack-name "InitialSetup-${Account_Name}" --parameter-overrides PrimePartitionKey=${PrimePartitionKey}  PrimePartitionKey1=${PrimePartitionKey1} PrimePartitionKey2=${PrimePartitionKey2} PrimePartitionKey3=${PrimePartitionKey3} 
                ''')
                }    
            }
        }
    }
}
